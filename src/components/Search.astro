---
const bundlePath = import.meta.env.DEV ? '/dist/pagefind/' : `${import.meta.env.BASE_URL}pagefind/`;
---

<site-search
  class="flex flex-col justify-center rounded-full px-3 hover:bg-zinc-200 hover:text-zinc-900 focus:shadow-[0_0_0_2px] focus:shadow-primary dark:text-zinc-50 dark:hover:bg-white/20 dark:hover:text-zinc-100"
  data-bundle-path={bundlePath}
>
  <button data-open-modal>
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
      class="size-6 text-zinc-600 dark:text-zinc-50"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"></path>
    </svg>
  </button>
  <dialog
    class="lg:max-h-[calc(100% - 6rem)] m-0 h-full max-h-full w-full max-w-full border border-zinc-400 bg-zinc-200 text-left shadow lg:mx-auto lg:mt-20 lg:h-max lg:w-2/3 lg:rounded-md lg:backdrop:backdrop-blur-sm dark:bg-zinc-900"
    aria-label="site search"
  >
    <div class="dialog-frame px-5 py-4">
      <h3 class="mb-2 text-left text-zinc-700 dark:text-zinc-300">Search our website</h3>
      <div id="pagefind-ui"></div>
      <button class="absolute right-2 top-2" data-close-modal>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          class="size-6 text-primary dark:text-zinc-300"
        >
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </dialog>
</site-search>

<script>
  class SiteSearch extends HTMLElement {
    constructor() {
      super();
      const openBtn = this.querySelector('button[data-open-modal]')!;
      const closeBtn = this.querySelector('button[data-close-modal]')!;
      const dialog = this.querySelector('dialog')!;
      const dialogFrame = this.querySelector('.dialog-frame')!;

      /** Close the modal if a user clicks on a link or outside of the modal. */
      const onClick = (event: MouseEvent) => {
        const isLink = 'href' in (event.target || {});
        if (isLink || (document.body.contains(event.target as Node) && !dialogFrame.contains(event.target as Node))) {
          closeModal();
        }
      };

      const openModal = (event?: MouseEvent): void => {
        dialog.showModal();
        document.body.toggleAttribute('data-search-modal-open', true);
        this.querySelector('input')!.focus();
        event?.stopPropagation();
        window.addEventListener('click', onClick);
      };

      const closeModal = () => {
        dialog.close();
      };

      openBtn.addEventListener('click', openModal as EventListener);
      closeBtn.addEventListener('click', closeModal);
      dialog.addEventListener('close', () => {
        document.body.toggleAttribute('data-search-modal-open', false);
        window.removeEventListener('click', onClick);
      });

      // Listen for `/` and `cmd + k` keyboard shortcuts.
      window.addEventListener('keydown', (e) => {
        const isInput =
          document.activeElement instanceof HTMLElement &&
          (['input select textarea'].includes(document.activeElement.tagName.toLowerCase()) ||
            document.activeElement.isContentEditable);
        if (e.metaKey === true && e.key === 'k') {
          dialog.open ? closeModal() : openModal();
          e.preventDefault();
        } else if (e.key === '/' && !dialog.open && !isInput) {
          openModal();
          e.preventDefault();
        }
      });

      const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
      onIdle(async () => {
        const { PagefindUI } = await import('@pagefind/default-ui');
        new PagefindUI({
          element: '#pagefind-ui',
          bundlePath: this.dataset.bundlePath,
          showSubResults: true,
          showImages: false,
          resetStyles: false,
        });

        // use for testing
        // openModal();
        // this.querySelector('input')!.value = 'geocoding';
        // this.querySelector('input')!.dispatchEvent(new Event('input'));
      });
    }
  }
  customElements.define('site-search', SiteSearch);
</script>

<!-- is:global is required, perhaps because it's within a dialog? -->
<style is:global>
  /* prevent scrolling the page when the modal is open */
  [data-search-modal-open] {
    overflow: hidden;
  }

  #pagefind-ui form {
    @apply relative;
  }

  #pagefind-ui input {
    @apply w-full rounded-md border border-gray-300 px-3 py-2 dark:border-gray-700;
  }

  #pagefind-ui button.pagefind-ui__search-clear {
    @apply absolute right-3 top-[14px] text-xs;
  }

  #pagefind-ui .pagefind-ui__message {
    @apply my-2 text-sm font-bold text-primary dark:text-zinc-300;
  }

  #pagefind-ui mark {
    @apply bg-accent;
  }

  #pagefind-ui .pagefind-ui__result {
    @apply my-4 rounded border border-black/30 bg-white px-3 py-2 dark:border-white/30 dark:bg-zinc-800;
  }

  #pagefind-ui .pagefind-ui__result-title a {
    @apply text-lg font-bold;
  }
  #pagefind-ui .pagefind-ui__result-nested .pagefind-ui__result-title a {
    @apply text-base font-semibold;
  }

  #pagefind-ui .pagefind-ui__result-excerpt {
    @apply text-zinc-600 dark:text-zinc-50;
  }
  #pagefind-ui .pagefind-ui__result-nested {
    @apply relative pl-4 pt-1;
  }

  #pagefind-ui .pagefind-ui__result-nested::before {
    content: '"';
    @apply absolute -left-1 -top-1 text-4xl italic text-primary dark:text-zinc-300;
  }

  #pagefind-ui button.pagefind-ui__button {
    @apply relative flex min-h-9 cursor-pointer items-center justify-center rounded-full border-2 border-zinc-400 bg-secondary px-8 text-zinc-50 no-underline transition-all hover:border-zinc-600 hover:shadow hover:contrast-125 focus:outline-2 focus:outline-accent focus:transition-none active:scale-95 active:shadow-inner dark:border-zinc-400/30 dark:hover:border-white/30;
  }
</style>
