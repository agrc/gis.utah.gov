---
import type { Row } from '@models/products/sgid/types';

import startCase from 'lodash.capitalize';

import { convertProductType, getArcGisHubUrl, getFeatureServiceUrl } from '@utils/data';

import { Image } from 'astro:assets';

import ExternalLink from '@components/page/ExternalLink.astro';
import dnrDataSet from '@images/sgid/dnr-logo.svg';
import internalDataSet from '@images/sgid/wavy-circle.svg';

const row = Astro.props as Row;

type appLink = {
  url: string;
  title: string;
};
const apps = [] as appLink[];
if (row.inActionUrl) {
  apps.push({ url: row.inActionUrl, title: 'Data in action' });
}
if (row.server?.host) {
  apps.push({ url: getFeatureServiceUrl(row.server), title: 'Feature service' });
}
if (row.hub?.itemId) {
  apps.push({ url: getArcGisHubUrl(row.hub), title: 'ArcGIS Hub item' });
}

let url = row.productPagePath;
if (!url.startsWith('https://')) {
  if (import.meta.env.DEV) {
    url = url;
  } else {
    url = Astro.site?.href + url;
  }
}

console.log(apps);
---

<div>
  <div class="flex grow flex-col">
    <a href={row.productPagePath} class="custom-style group">
      <div class="flex items-center gap-2">
        {
          url.startsWith('https://dwr-data-utahdnr.hub.arcgis.com/') ? (
            <Image src={dnrDataSet} alt="SGID DNR Data Set" loading={row.index < 3 ? 'eager' : 'lazy'} class="size-6" />
          ) : (
            <Image
              src={internalDataSet}
              alt="SGID Internal Data Set"
              loading={row.index < 3 ? 'eager' : 'lazy'}
              class="size-6"
            />
          )
        }
        {row.productPagePath && <div class="text-xs">{`${row.productPagePath}`}</div>}
      </div>
      <h4 class="group-hover:underline">{row.displayName}</h4>
    </a>
    <div class="primary-background dark:text-white">
      <slot />
    </div>
    <div>
      <span class="text-sm font-semibold text-secondary dark:text-white">Category:{' '}</span><span
        >{startCase(row.category ?? 'Uncategorized')}</span
      >
      <span class="text-sm font-semibold text-secondary dark:text-white">Type:{' '}</span><span
        >{convertProductType(row.dataType)}</span
      >
      {
        row.openSgid && (
          <>
            <span class="text-sm font-semibold text-secondary dark:text-white">Open SGID: </span>
            <span>{row.openSgid}</span>
          </>
        )
      }
      <span class="text-sm font-semibold text-secondary dark:text-white"
        >{row.source?.length === 1 ? 'Steward' : 'Stewards'}:{' '}</span
      ><span>{row.source?.join(' & ')}</span>
    </div>
    <div class="flex gap-1">
      {
        apps.length > 0 &&
          apps.map((app, index) => (
            <Fragment>
              <ExternalLink href={app.url}>{app.title}</ExternalLink>
              {index < apps.length - 1 && <span>Â·</span>}
            </Fragment>
          ))
      }
    </div>
  </div>
</div>
