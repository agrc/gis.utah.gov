---
interface Props {
  title: string;
  value: string;
}

import { ClipboardCopy } from '@astro-github-elements/clipboard-copy';

const { title, value } = Astro.props;
---

<p>{title}</p>
<div class="inline-flex items-center">
  <code
    class="scrollbar-hide no-scrollbar min-w-48 max-w-lg overflow-auto rounded border border-black/30 px-2 py-1 text-sm text-zinc-600 dark:border-white/20 dark:text-zinc-300"
    >{value || 'value not set'}</code
  >
  <ClipboardCopy value={value}
    ><span class="sr-only">Copy to clipboard</span>
    <div aria-live="polite" class="copy-to-clipboard-announce"></div>
    <span class="copy-to-clipboard-notice" hidden
      ><svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        class="mx-2 size-6"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
      </svg>
    </span>
    <span class="copy-to-clipboard-action"
      ><svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        class="mx-2 size-6"
        aria-hidden="true"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 0 1-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 0 1 1.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 0 0-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 0 1-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 0 0-3.375-3.375h-1.5a1.125 1.125 0 0 1-1.125-1.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H9.75"
        ></path>
      </svg>
    </span>
    <script>
      document.addEventListener('clipboard-copy', (event) => {
        const notice = (event.target as HTMLSpanElement)?.querySelector('.copy-to-clipboard-notice') as HTMLSpanElement;
        const action = (event.target as HTMLSpanElement)?.querySelector('.copy-to-clipboard-action') as HTMLSpanElement;
        const announce = (event.target as HTMLDivElement)?.querySelector(
          '.copy-to-clipboard-announce'
        ) as HTMLDivElement;

        if (!announce || !notice || !action) {
          console.warn('No element found');

          return;
        }

        announce.setAttribute('aria-label', 'Copied');
        notice.hidden = false;
        action.hidden = true;

        setTimeout(() => {
          announce.setAttribute('aria-label', '');
          notice.hidden = true;
          action.hidden = false;
        }, 1000);
      });
    </script>
  </ClipboardCopy>
</div>
<style>
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
</style>
