---
import type { IDataCategory, IStandardPageMetadata } from '@models/types';
import { Pillar, SgidCategory } from '@models/types';

import type { GetStaticPathsResult } from 'astro';

import { basename } from 'path';

import BreadCrumbs from '@components/data/BreadCrumbs.astro';
import CardForData from '@components/data/CardForData.astro';
import Section from '@components/page/Section.astro';
import Layout from '@layouts/FullWidth.astro';

interface Props {
  category?: string;
}

const { category } = Astro.params as Props;
const categoryString = category?.toLowerCase();
const readableCategory = categoryString?.replaceAll('-', ' ');

// generate index pages for all the SgidCategory enums
export async function getStaticPaths() {
  let paths = [] as GetStaticPathsResult;

  for (let category in SgidCategory) {
    // kebab case the snake case category enum
    paths.push({ params: { category: category.toLowerCase().replaceAll('_', '-') } });
  }

  return paths;
}

// filter and find all pages for the given category
const pages = (await Astro.glob<IDataCategory>('../**/*.astro'))
  .filter((page) => {
    const inCategory = [
      page.metadata?.category?.toLowerCase(),
      page?.metadata?.secondaryCategory?.toLowerCase(),
    ].includes(categoryString);

    return inCategory && !basename(page.file).startsWith('_');
  })
  .sort((a, b) => a.metadata.pageTitle.localeCompare(b.metadata.pageTitle));

const toEnum = (category?: string) => {
  if (!category) {
    return '';
  }

  return SgidCategory[category.toUpperCase().replaceAll('-', '_') as keyof typeof SgidCategory];
};

const page: IStandardPageMetadata = {
  pageTitle: `SGID ${readableCategory} data`,
  pageDescription: `View a list of all the SGID datasets in the ${readableCategory} category.`,
  pillar: Pillar.PRODUCTS,
  section: [
    {
      title: `The ${readableCategory} data index`,
      subTitle: `To view all ${readableCategory} data from stewards besides UGRC, search the <a href="/products/sgid/sgid-index">SGID Index</a>.`,
    },
  ],
};
---

<Layout {...page}>
  <BreadCrumbs
    category={toEnum(category)}
    class="bg-zinc-100 dark:bg-zinc-900 dark:text-zinc-300"
    gradients="from-zinc-100 dark:from-zinc-950"
  />
  <Section {...page.section[0]}>
    {
      pages.map((page) => (
        <CardForData
          title={page.metadata.pageTitle}
          stewards={page.metadata.stewards}
          type={page.metadata.type}
          href={page.url}
        >
          {page.metadata.pageDescription}
        </CardForData>
      ))
    }
  </Section>
</Layout>
