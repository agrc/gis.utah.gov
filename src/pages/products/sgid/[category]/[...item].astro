---
import Layout from '@layouts/FullWidth.astro';
import Section from '@components/page/Section.astro';
import CardForData from '@components/data/CardForData.astro';
import { getCollection, getEntry } from 'astro:content';

const { category, item } = Astro.params;

export async function getStaticPaths() {
  const categories = [
    'address',
    'aerial',
    'bioscience',
    'boundaries',
    'cadastre',
    'climate',
    'contours',
    'demographic',
    'economy',
    'elevation',
    'emergency',
    'energy',
    'environment',
    'farming',
    'geoscience',
    'health',
    'history',
    'indices',
    'location',
    'planning',
    'political',
    'recreation',
    'society',
    'topo',
    'transportation',
    'utilities',
    'water',
  ];
  const sgidDataPages = await getCollection('sgid');

  let paths = [];
  categories.forEach((category) => {
    const categoryPages = sgidDataPages.filter((post) => post.data.category.toLowerCase() === category);

    categoryPages.forEach((entry) => {
      paths.push({ params: { category, item: entry.slug } });
    });

    paths.push({ params: { category, item: undefined } });

    return paths;
  });

  return paths;
}

const properCase = (str) => {
  return str
    .split(' ')
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};

let entries = [];
let Content = {};
let entry = {};

if (item) {
  entry = await getEntry('sgid', item);
  Content = (await entry.render()).Content;
} else {
  entries = (await getCollection('sgid')).filter((post) => post.data.category.toLowerCase() === category);
}
---

{
  !item ? (
    <Layout title={`SGID ${category} index`}>
      <Section title={`${properCase(category)} index`}>
        {entries.map((post) => (
          <CardForData href={category + '/' + post.slug} {...post.data}>
            {post.data.description}
          </CardForData>
        ))}
      </Section>
    </Layout>
  ) : (
    <Content />
  )
}
