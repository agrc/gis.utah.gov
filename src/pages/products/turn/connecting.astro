---
import type { IStandardPageMetadata } from '@models/products/sgid/types';

import ExternalLink from '@components/page/ExternalLink.astro';
import QuickLinks from '@components/page/QuickLinks.astro';
import Section from '@components/page/Section.astro';
import Layout from '@layouts/FullWidth.astro';

import { Code } from 'astro:components';

import { stripeSections } from '@utils/page';

const page: IStandardPageMetadata = {
  title: 'Getting Connected',
  pillar: 'TURN',
  section: stripeSections([{}, { title: 'Getting Connected' }, { title: 'TURN Network' }, { title: 'Nevada Network' }]),
};
---

<Layout title={page.title} pillar={page.pillar}>
  <QuickLinks links={page.section} slot="quick-links" />

  <Section {...page.section[1]}>
    <p>
      Congrats on your new TURN or Nevada GPS network subscription! Below, you'll find resources and information on
      getting connected to the network.
    </p>
  </Section>
  <Section {...page.section[2]}>
    <p>
      The TURN GPS Network, which serves Utah and some areas of surrounding states with 113 sensors. We are currently in
      the process of expanding this network in Utah, Idaho, and Wyoming. The TURN Network runs on the Trimble Pivot
      Platform. You may Login using your User Name and Password. If you don't have an account yet, you can register <a
        href="https://turngps-billpay.ugrc.utah.gov/">here</a
      >. If you haven't already, you will need to create a Utah ID.
    </p>
    <p>
      TURN GPS is a statewide network of permanently located GPS receivers, which provides both real time corrections
      and data for post processing to those that have an active subscription. Current cost is $600 for each User Login
      and is good for a full year.
    </p>
    <ul>
      <li><b>The Coordinate Reference Frame for this network is NAD83(2011)(EPOCH:2010.0000.)</b></li>
      <li><b>Connections: IP address - 165.239.144.5 Port - 2101</b></li>
      <br />
      <p>The following is a list of the new Source Table Mountpoints with a brief definition:</p>
    </ul>
    <ul>
      <li>
        GNSS-VRS-NAD83-RTCM32 (Full GNSS network solution including GPS, Glonass, Galileo, BeiDou with RTCM32 output
        format) (*Recommended for the majority of all users*)
      </li>
      <li>GNSS-VRS-NAD83-CMRx (Full GNSS network solution including GPS, Glonass, Galileo with CMRx output format)</li>
      <li>VRS-NAD83-CMRp (Full network solution including GPS, Glonass with CMRp output format)</li>
      <li>VRS-NAD83-CMRx (Full network solution including GPS, Glonass with CMRx output format)</li>
      <li>VRS-NAD83-RTCM31 (Full network solution including GPS, Glonass with RTCM31 output format)</li>
      <li>VRS-NAD83-RTCM32 (Full network solution including GPS, Glonass with RTCM32 output format)</li>
      <li>
        MS-NAD83-CMRp (Single base solution from the closest base, determined by the system, including GPS, Glonass with
        CMRp output format)
      </li>
      <li>
        MS-NAD83-CMRx (Single base solution from the closest base, determined by the system, including all available
        satellite constellations from that receiver with CMRx output format)
      </li>
      <li>
        MS-NAD83-RTCM31(Single base solution from the closest base, determined by the system, including all available
        satellite constellations from that receiver with RTCM31 output format)
      </li>
      <li>
        MS-NAD83-RTCM32 (Single base solution from the closest base, determined by the system, including all available
        satellite constellations from that receiver with RTCM32 output format)
      </li>
    </ul>
    <p>
      Mountpoints that begin with MS are single base line solutions with the system automatically choosing the closest
      base station.
    </p>
    <p>For Questions or Help contact the Support Desk at 801-538-3440 or toll-free 1-800-678-3440.</p>
  </Section>
  <Section {...page.section[3]}>
    <p>
      You can <ExternalLink href="https://doc.arcgis.com/en/arcgis-online/manage-data/add-item-from-url.htm"
        >add</ExternalLink
      > individual layers within Discover as items in ArcGIS Online, making them available in both web maps and ArcGIS Pro
      through your organization's content.
    </p>
    <p>
      You can also <ExternalLink
        href="https://doc.arcgis.com/en/arcgis-online/create-maps/add-layers-from-url.htm#ESRI_SECTION1_0255B1BD71534C53A5CF2F01092BC99A"
        >add WMTS layers</ExternalLink
      > directly to web maps.
    </p>
    <p>
      <strong>Remember!</strong> If you want to use licensed links for the high-res imagery in a publicly-available webmap,
      you need to request a set of locked-down links.
    </p>
  </Section>
  <Section {...page.section[4]}>
    <p>
      Check out <ExternalLink
        href="https://help.autodesk.com/view/MAP/2023/ENU/?guid=GUID-A9F620AD-6B9A-487D-9B33-7D365307D571"
        >AutoCAD's documentation</ExternalLink
      > for adding Discover layers via WMS. You may be able to use WMTS as well, but we've not seen good success with it
      so far due to AutoCAD's implementation of the WMTS protocol.
    </p>
    <p>For other CAD programs, please check the product's documentation for WMS or WMTS support.</p>
  </Section>
  <Section {...page.section[5]}>
    <p>
      The <ExternalLink href="https://developers.arcgis.com/javascript/">ArcGIS Maps SDK for JavaScript</ExternalLink> provides
      a class for interacting with these services, called a <ExternalLink
        href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WebTileLayer.html"
        >WebTileLayer</ExternalLink
      >. Using this class is as simple as passing in the URL to the WMTS service with the appropriate level, column, and
      row tokens. For example:
    </p>
    <Code
      lang="js"
      code=`
    require([
      "esri/Map",
      "esri/views/MapView",
      "esri/layers/WebTileLayer"
    ], function (Map, MapView, WebTileLayer) {
      const map = new Map();

      const layer = new WebTileLayer({
        urlTemplate:
          "https://discover.agrc.utah.gov/login/path/bottle-apple-crater-oberon/tiles/lite_basemap/{level}/{col}/{row}"
      });

      map.add(layer);

      const view = new MapView({
        container: "viewDiv",
        map: map,
        center: [-111.5, 40],
        zoom: 11
      });
    });`
    />
    <p>
      There is one caveat to using discover services with WebTileLayer; it does not store metadata about the service.
      The piece of metadata that will affect developers the most is the cache level information. WebTileLayer's cache
      levels are based on a suggested set that is common amongst popular tile providers. The suggested set uses 0
      through 19. If the base map you are using deviates from these levels (most of our base maps are 0-19 but <a
        href="/documentation/developer/base-maps/basemap-scales">there are a few exceptions</a
      >), you will be responsible for setting those values or you will not be given the UI to see the full tile set. As
      you can see in the sample below it takes a fair amount of work.
    </p>
    <Code
      lang="js"
      code=`
    require([
      "esri/Map",
      "esri/views/MapView",
      "esri/layers/WebTileLayer",
      "esri/layers/support/LOD",
      "esri/layers/support/TileInfo"
    ], function (Map, MapView, WebTileLayer, LOD, TileInfo) {
      const tileSize = 256;
      const earthCircumference = 40075016.685568;
      const inchesPerMeter = 39.37;
      const initialResolution = earthCircumference / tileSize;

      const dpi = 96;
      const maxLevel = 12;
      const squared = 2;
      const levelsOfDetail = [];

      for (let level = 0; level <= maxLevel; level++) {
        const resolution = initialResolution / Math.pow(squared, level);
        const scale = resolution * dpi * inchesPerMeter;

        levelsOfDetail.push(
          new LOD({
            level,
            scale,
            resolution
          })
        );
      }

      const map = new Map();

      const tileInfo = {
        dpi: dpi,
        size: tileSize,
        origin: {
          x: -20037508.342787,
          y: 20037508.342787
        },
        spatialReference: {
          wkid: 3857
        },
        lods: levelsOfDetail
      };

      const layer = new WebTileLayer({
        urlTemplate:
          "https://discover.agrc.utah.gov/login/path/your-quad-word-here/tiles/lite_basemap/{level}/{col}/{row}",
        tileInfo
      });

      map.add(layer);

      const view = new MapView({
        container: "viewDiv",
        map,
        center: [-111.5, 40],
        zoom: 11
      });
    });
    `
    />
    <p>
      UGRC has a widget called <ExternalLink href="https://www.npmjs.com/package/@ugrc/layer-selector"
        >layer-selector</ExternalLink
      > that handles these issues as well as makes working with base maps more streamlined. It's main purpose is to provide
      users the ability to quickly switch between base maps and toggle associated overlays.
    </p>
  </Section>
</Layout>
